{"version":"blocks-webapp@0.3.0","name":"Text Sharing API","description":"A simple Pastebin-style text sharing service.","readme":"","language":"motoko","output":"import HashMap \"mo:base/HashMap\";\nimport Nat32 \"mo:base/Nat32\";\nimport Text \"mo:base/Text\";\n\nactor TextSharingApi {\n\tpublic func share(text : Text) : async Nat32 {\n\t\ttextLookup.put(Text.hash(text), text);\n\t\treturn Text.hash(text);\n\t};\n\t\n\tpublic query func get(id : Nat32) : async ?Text {\n\t\treturn textLookup.get(id);\n\t};\n\t\n\tvar textLookup : HashMap.HashMap<Nat32, Text> = HashMap.HashMap<Nat32, Text>(0, Nat32.equal, func (x) {x});\n}","nodes":{"1828":{"data":{"editor:advanced":false,"name":"share"},"outputs":{"params":{"connections":[{"node":"1829","input":"param","data":{}}]},"body":{"connections":[{"node":"1834","input":"before","data":{}}]},"caller":{"connections":[]},"function":{"connections":[]}},"position":[-352,-224],"name":"Function"},"1829":{"data":{"name":"text","type":{"name":"Text","generics":[]}},"outputs":{"value":{"connections":[{"node":"1834","input":"value","data":{}},{"node":"1849","input":"value","data":{}}]}},"position":[-128,-112],"name":"Parameter"},"1830":{"data":{"name":"get","editor:advanced":false,"query":true},"outputs":{"params":{"connections":[{"node":"1831","input":"param","data":{}}]},"body":{"connections":[{"node":"1851","input":"statement","data":{}}]},"caller":{"connections":[]},"function":{"connections":[]}},"position":[-352,192],"name":"Function"},"1831":{"data":{"name":"id","type":{"name":"Nat32","generics":[]}},"outputs":{"value":{"connections":[{"node":"1852","input":"key","data":{}}]}},"position":[-128,320],"name":"Parameter"},"1832":{"data":{"name":"textLookup","editor:advanced":false,"readonly":true},"outputs":{"setup":{"connections":[]},"value":{"connections":[]}},"position":[-672,-224],"name":"State"},"1833":{"data":{"keyType":{"name":"Nat32","generics":[]},"valueType":{"name":"Text","generics":[]}},"outputs":{"value":{"connections":[{"node":"1832","input":"initialValue","data":{}}]}},"position":[-896,-96],"name":"NewHashMap"},"1834":{"data":{},"outputs":{"after":{"connections":[{"node":"1861","input":"statement","data":{}}]}},"position":[352,-224],"name":"MapPut"},"1849":{"data":{},"outputs":{"hash":{"connections":[{"node":"1834","input":"key","data":{}},{"node":"1861","input":"value","data":{}}]}},"position":[96,-80],"name":"HashText"},"1850":{"data":{"stateNode":1832},"outputs":{"value":{"connections":[{"node":"1834","input":"map","data":{}}]}},"position":[96,-192],"name":"StateRead"},"1851":{"data":{},"outputs":{},"position":[352,192],"name":"Return"},"1852":{"data":{},"outputs":{"value":{"connections":[{"node":"1851","input":"value","data":{}}]}},"position":[128,240],"name":"MapGet"},"1853":{"data":{"stateNode":1832},"outputs":{"value":{"connections":[{"node":"1852","input":"map","data":{}}]}},"position":[-128,224],"name":"StateRead"},"1854":{"data":{"widthPixels":450,"text":"Define a Hash Map to store text values."},"outputs":{},"position":[-928,-304],"name":"Comment"},"1857":{"data":{"widthPixels":1164,"heightPixels":302},"outputs":{},"position":[-384,-256],"name":"CommentRegion"},"1858":{"data":{"widthPixels":940,"heightPixels":299},"outputs":{},"position":[-384,160],"name":"CommentRegion"},"1859":{"data":{"widthPixels":461,"heightPixels":300},"outputs":{},"position":[-928,-256],"name":"CommentRegion"},"1860":{"data":{"widthPixels":1153,"text":"Add a Text entry to the database. Returns the 32-bit hash ID. Note that hash collisions are possible with this reference implementation."},"outputs":{},"position":[-384,-304],"name":"Comment"},"1861":{"data":{},"outputs":{},"position":[576,-80],"name":"Return"},"1862":{"data":{"widthPixels":928,"text":"Find a Text entry corresponding to the given ID. Returns an Optional (nullable) Text value."},"outputs":{},"position":[-384,112],"name":"Comment"}}}